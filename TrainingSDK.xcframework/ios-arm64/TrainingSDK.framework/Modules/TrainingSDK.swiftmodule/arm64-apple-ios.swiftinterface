// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrainingSDK
import AVFoundation
import AVKit
import Alamofire
import Charts
import CoreMIDI
import Foundation
import HealthKit
import Instructions
import JWTDecode
import Localize_Swift
import SafariServices
import Swift
import SwiftDate
import SwiftyJSON
@_exported import TrainingSDK
import UIKit
import YoutubePlayer_in_WKWebView
import _Concurrency
public class Stat : Swift.Codable {
  public var cal: Swift.Int?
  public var time: Swift.Int?
  public var distance: Swift.Double?
  public var steps: Swift.Int?
  public var date: Foundation.Date?
  public init()
  public func statFromJson(_ json: Foundation.NSDictionary) -> TrainingSDK.Stat
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum TrainingType : Swift.Codable {
  case diabetes, bariatrico
  public static func == (a: TrainingSDK.TrainingType, b: TrainingSDK.TrainingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
public struct WorkoutSummary : Swift.Codable {
  public var title: Swift.String?
  public var classTitle: Swift.String?
  public var image: Swift.String?
  public var alternativeClassAvailable: Swift.Bool?
  public var kcal: Swift.String?
  public var descripcion: Swift.String?
  public var duration: Swift.String?
  public var url: Swift.String?
  public var day: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class WorkoutSDK {
  public static let sharedInstance: TrainingSDK.WorkoutSDK
  public func start(with user: Swift.String, appID: Swift.String, password: Swift.String)
  public func startSession(appID: Swift.String, password: Swift.String)
  public func logout()
  public func setMainColor(color: Swift.String)
  public func isProfileFilled() -> Swift.Bool
  public func showVirtualPT()
  public func updateProfile(user: Swift.String, sex: Swift.String?, height: Swift.Int?, weigth: Swift.Int?, birthDate: Foundation.Date?, level: Swift.Int?, basalMetabolism: Swift.Int? = nil, operationDate: Foundation.Date? = nil, activityLevel: Swift.Int? = 1, generateProfile: Swift.Bool = false)
  public func showWorkoutPlan()
  public func getWorkoutPlan(_ completion: @escaping ((UIKit.UIViewController) -> ()))
  public func getStatsViewController(_ completion: @escaping ((UIKit.UIViewController) -> ()))
  public func getHelpController() -> UIKit.UIViewController
  public func showTrainingProfileViewController()
  public func showTrainingProfileWith(user: Swift.String, sex: Swift.String?, height: Swift.Int?, weigth: Swift.Int?, birthDate: Foundation.Date?, level: Swift.Int?, basalMetabolism: Swift.Int? = nil, _ completion: @escaping ((UIKit.UIViewController?) -> ()))
  public func getTodayStats(_ completion: @escaping ((TrainingSDK.Stat?) -> ()))
  public func getTodayWorkout(_ completion: @escaping ((TrainingSDK.WorkoutSummary?) -> ()))
  public func showTodaytraining()
  public func getStatsBetween(startDate: Foundation.Date, endDate: Foundation.Date, _ completion: @escaping (([TrainingSDK.Stat]?) -> ()))
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class HCVimeoVideoExtractor : ObjectiveC.NSObject {
  public static func fetchVideoURLFrom(url: Foundation.URL, completion: @escaping (_ video: TrainingSDK.HCVimeoVideo?, _ error: Swift.Error?) -> Swift.Void)
  public static func fetchVideoURLFrom(id: Swift.String, completion: @escaping (_ video: TrainingSDK.HCVimeoVideo?, _ error: Swift.Error?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class VitaleViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum HCVimeoThumbnailQuality : Swift.String {
  case quality640
  case quality960
  case quality1280
  case qualityBase
  case qualityUnknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HCVimeoVideoQuality : Swift.String {
  case quality360p
  case quality540p
  case quality640p
  case quality720p
  case quality960p
  case quality1080p
  case qualityUnknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class HCVimeoVideo : ObjectiveC.NSObject {
  public var title: Swift.String
  public var thumbnailURL: [TrainingSDK.HCVimeoThumbnailQuality : Foundation.URL]
  public var videoURL: [TrainingSDK.HCVimeoVideoQuality : Foundation.URL]
  @objc override dynamic public init()
  @objc deinit
}
extension TrainingSDK.TrainingType : Swift.Equatable {}
extension TrainingSDK.TrainingType : Swift.Hashable {}
extension TrainingSDK.HCVimeoThumbnailQuality : Swift.Equatable {}
extension TrainingSDK.HCVimeoThumbnailQuality : Swift.Hashable {}
extension TrainingSDK.HCVimeoThumbnailQuality : Swift.RawRepresentable {}
extension TrainingSDK.HCVimeoVideoQuality : Swift.Equatable {}
extension TrainingSDK.HCVimeoVideoQuality : Swift.Hashable {}
extension TrainingSDK.HCVimeoVideoQuality : Swift.RawRepresentable {}
